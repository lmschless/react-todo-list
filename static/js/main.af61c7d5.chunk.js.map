{"version":3,"sources":["logo.svg","Todo.js","NewTodoForm.js","TodosList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","toggleForm","setState","isEditing","state","handleUpdate","evt","preventDefault","update","id","task","handleChange","target","value","name","this","className","onSubmit","type","onChange","completed","onClick","toggleTodo","class","remove","Component","NewTodoForm","handleSubmit","newTodo","v4","createTodo","showForm","placeholder","TodosList","todos","filter","todo","toggleCompletion","updatedTodos","map","updatedName","create","key","edit","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af61c7d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './Todo.css';\nexport default class Todo extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisEditing: false,\n\t\t\ttask: this.props.name\n\t\t};\n\t}\n\n\ttoggleForm = () => {\n\t\tthis.setState({ isEditing: !this.state.isEditing });\n\t};\n\n\thandleUpdate = (evt) => {\n\t\tevt.preventDefault();\n\t\t// take a new todo and pass up to parent\n\t\tthis.props.update(this.props.id, this.state.task);\n\t\tthis.setState({\n\t\t\tisEditing: false\n\t\t});\n\t};\n\n\thandleChange = (evt) => {\n\t\tthis.setState({\n\t\t\ttask: evt.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\tlet result;\n\n\t\tif (this.state.isEditing) {\n\t\t\tresult = (\n\t\t\t\t<div className=\"Todo\">\n\t\t\t\t\t<form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button>Save</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\tresult = (\n\t\t\t\t<div className=\"Todo\">\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tthis.props.completed ? 'Todo-task completed' : 'Todo-task'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.props.toggleTodo(this.props.id);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.name}{' '}\n\t\t\t\t\t</li>{' '}\n\t\t\t\t\t<div className=\"Todo-buttons\">\n\t\t\t\t\t\t<button onClick={this.toggleForm}>\n\t\t\t\t\t\t\t<i class=\"fas fa-pen\" />\n\t\t\t\t\t\t</button>{' '}\n\t\t\t\t\t\t<button onClick={this.props.remove}>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t<i class=\"fas fa-trash\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t\t// <div>\n\t\t// \t<li>\n\t\t// \t\t{this.props.name} <button onClick={this.props.edit}>Edit</button>{' '}\n\t\t// \t\t<button onClick={this.props.remove}>X</button>\n\t\t// \t</li>{' '}\n\t\t// </div>\n\t}\n}\n","import React, { Component } from 'react';\nimport { v4 } from 'uuid';\nimport './NewTodoForm.css';\n\nexport default class NewTodoForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\tshowForm: false\n\t\t};\n\t}\n\n\thandleChange = (evt) => {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t};\n\n\thandleSubmit = (evt) => {\n\t\tevt.preventDefault();\n\t\t// create variable on submit to add a unique ID to every box.\n\t\t// ID will be used for selecting which object to remove from state/window.\n\t\tconst newTodo = {\n\t\t\t...this.state,\n\t\t\tid: v4(),\n\t\t\tcompleted: false\n\t\t};\n\t\tthis.props.createTodo(newTodo);\n\t\tthis.setState({ name: '' });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"New Todo\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tvalue={this.state.name}\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<i class=\"fas fa-plus\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport { v4 } from 'uuid';\nimport './TodoList.css';\nexport default class TodosList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\ttodos: [\n\t\t\t\t{ name: 'Take out the trash', id: v4(), completed: false },\n\t\t\t\t{ name: 'Walk Gizmo', id: v4(), completed: false },\n\t\t\t\t{ name: 'Goto the gym', id: v4(), completed: false },\n\t\t\t\t{ name: 'Wash Car', id: v4(), completed: false }\n\t\t\t]\n\t\t};\n\t}\n\n\tremove = (id) => {\n\t\t// create a new array that does NOT contain the todo object with an id\n\t\t// that matches the id passed in (corresponds to the specific X button clicked)\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter((todo) => todo.id !== id)\n\t\t});\n\t};\n\n\ttoggleCompletion = (id) => {\n\t\tconst updatedTodos = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, completed: !todo.completed };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t};\n\n\tupdate = (id, updatedName) => {\n\t\tconst updatedTodos = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, name: updatedName };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t};\n\n\tcreate = (newTodo) => {\n\t\tthis.setState({\n\t\t\ttodos: [ ...this.state.todos, newTodo ]\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TodoList\">\n\t\t\t\t<h1>\n\t\t\t\t\tTodo List!<span>A Simple React Todo List App</span>\n\t\t\t\t</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t{this.state.todos.map((todo) => (\n\t\t\t\t\t\t<Todo\n\t\t\t\t\t\t\tname={todo.name}\n\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\tid={todo.id}\n\t\t\t\t\t\t\tremove={() => this.remove(todo.id)}\n\t\t\t\t\t\t\tedit={() => this.edit(todo.id)}\n\t\t\t\t\t\t\tupdate={this.update}\n\t\t\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\t\t\ttoggleTodo={this.toggleCompletion}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<br />\n\t\t\t\t<NewTodoForm createTodo={this.create} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport TodosList from './TodosList';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TodosList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}